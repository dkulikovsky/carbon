Index: bin/ceres-maintenance
===================================================================
--- bin/ceres-maintenance	(revision 6501)
+++ bin/ceres-maintenance	(working copy)
@@ -1,4 +1,4 @@
-#!/usr/bin/env python2.6
+#!/usr/bin/python
 
 import sys
 import os
@@ -7,6 +7,7 @@
 from os.path import basename, dirname, splitext, exists, join, isfile, expanduser, abspath
 from optparse import OptionParser
 from ceres import getTree, CeresNode
+from multiprocessing import Pool
 
 # Make carbon imports available for some functionality
 root_dir = os.environ['GRAPHITE_ROOT'] = os.environ.get('GRAPHITE_ROOT', '/opt/graphite/')
@@ -166,6 +167,9 @@
   Plugin.context['log'] = log
   Plugin.context['MissingRequiredParam'] = MissingRequiredParam
   Plugin.context['PluginFail'] = PluginFail
+  Plugin.context['params']['maxSlicesPerNode'] = 10
+  Plugin.context['params']['maxSliceGap'] = 80
+  Plugin.context['params']['mode'] = 'operate'
 
   from carbon.conf import settings, load_storage_rules
   settings.use_config_directory(options.configdir)
@@ -231,6 +235,8 @@
   # Begin walking the tree
   dispatch('maintenance_start', tree)
 
+  proc_pool = Pool(processes = 20)
+
   for current_dir, subdirs, files in os.walk(options.root):
     for subdir in subdirs:
       if subdir == '.ceres-tree':
@@ -243,8 +249,8 @@
         if exists( join(path, '.ceres-node') ):
           nodePath = tree.getNodePath(path)
           node = CeresNode(tree, nodePath, path)
-          dispatch('node_found', node)
-
+#          dispatch('node_found', node)
+          proc_pool.apply_async(dispatch, ('node_found', node,))
         else:
           dispatch('directory_found', path)
           if not os.listdir(path): # check again in case a handler empties it
@@ -253,4 +259,6 @@
       else:
         dispatch('directory_empty', path)
 
+  proc_pool.close()
+  proc_pool.join()
   dispatch('maintenance_complete', tree)
